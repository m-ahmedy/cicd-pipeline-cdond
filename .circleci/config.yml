version: 2.1

commands:
    destroy-environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
        parameters:
            workflow_id:
                type: string
        steps:
            - run:
                  name: Destroy environments
                  when: on_fail
                  command: |
                      aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
                      aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
                      aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>

    revert-migrations:
        description: Revert the last migration if successfully run in the current workflow.
        steps:
            - run:
                  name: Revert migrations
                  when: on_fail
                  command: |
                      if [[ -f ".circleci/outputs/db-migration-success" ]]; then
                        cd backend
                        npm i
                        npm run migration:revert
                      fi

jobs:
    build-frontend:
        docker:
            - image: circleci/node:lts
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-build]
            - run:
                  name: Install NPM dependencies
                  command: cd frontend && npm install
            - run:
                  name: Build front-end
                  command: cd frontend && npm run build
            - save_cache:
                  paths: [frontend/node_modules]
                  key: frontend-build

    build-backend:
        docker:
            - image: circleci/node:lts
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Install NPM dependencies
                  command: cd backend && npm install
            - run:
                  name: Build back-end
                  command: cd backend && npm run build
            - save_cache:
                  paths: [backend/node_modules]
                  key: backend-build
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/backend/dist

    test-frontend:
        docker:
            - image: circleci/node:lts
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-build]
            - run:
                  name: Install NPM dependencies
                  command: cd frontend && npm install
            - run:
                  name: Test front-end
                  command: cd frontend && npm run test

    test-backend:
        docker:
            - image: circleci/node:lts
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Install NPM dependencies
                  command: cd backend && npm install
            - run:
                  name: Test back-end
                  command: cd backend && npm run test
                  environment:
                      NODE_OPTIONS: --max_old_space_size=8192

    scan-frontend:
        docker:
            - image: circleci/node:lts
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-build]
            - run:
                  name: Install NPM dependencies
                  command: cd frontend && npm install
            - run:
                  name: Security audit front-end
                  command: cd frontend && npm audit --audit-level=critical

    scan-backend:
        docker:
            - image: circleci/node:lts
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Install NPM dependencies
                  command: cd backend && npm install
            - run:
                  name: Security audit back-end
                  command: cd backend && npm audit --audit-level=critical

    deploy-infrastructure:
        docker:
            - image: python:3.7-alpine
        steps:
            - checkout
            - run:
                  name: Install dependencies
                  command: |
                      apk add --update tar gzip curl
                      pip install awscli
            - run:
                  name: Ensure back-end infrastructure exists
                  command: |
                      aws cloudformation deploy \
                      --template-file .circleci/files/backend.yml \
                      --tags project=udapeople-${CIRCLE_WORKFLOW_ID} \
                      --stack-name=udapeople-backend-${CIRCLE_WORKFLOW_ID} \
                      --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
            - run:
                  name: Ensure front-end infrastructure exist
                  command: |
                      aws cloudformation deploy \
                      --template-file .circleci/files/frontend.yml \
                      --tags project=udapeople-${CIRCLE_WORKFLOW_ID} \
                      --stack-name=udapeople-frontend-${CIRCLE_WORKFLOW_ID} \
                      --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
            - run:
                  name: Add back-end ip to ansible inventory
                  command: |
                      BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
                        --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
                        --query 'Reservations[*].Instances[*].PublicIpAddress' \
                        --output text)
                      curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" --request PUT --data "http://$BACKEND_AWS_PUBLIC_IP:3030" https://api.memstash.io/values/backend-url
                      echo "[backend]" >> .circleci/ansible/inventory.txt
                      echo "$BACKEND_AWS_PUBLIC_IP" >> .circleci/ansible/inventory.txt
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/.circleci/ansible/inventory.txt
            - destroy-environment:
                  workflow_id: ${CIRCLE_WORKFLOW_ID}

    configure-infrastructure:
        docker:
            - image: python:3.7-alpine
              environment:
                  ANSIBLE_HOST_KEY_CHECKING: "no"
        steps:
            - checkout
            - run:
                  name: Install dependencies
                  command: |
                      apk add --update tar gzip curl nodejs npm ansible zip
                      pip install awscli
            - add_ssh_keys:
                  fingerprints:
                      ["3d:2b:bf:62:ce:19:0c:d6:9e:67:24:77:b9:f3:69:e0"]
            - attach_workspace:
                  at: ~/
            - run:
                  name: Configure Server
                  command: |
                      cd .circleci/ansible
                      cat inventory.txt
                      ansible-playbook -vvvv -i inventory.txt configure-server.yml
            - destroy-environment:
                  workflow_id: ${CIRCLE_WORKFLOW_ID}

    run-migrations:
        docker:
            - image: python:3.7-alpine
        steps:
            - checkout
            - run:
                  name: Install dependencies
                  command: |
                      apk add --update tar gzip curl nodejs npm zip
                      pip install awscli
            - run:
                  name: Run migrations
                  command: |
                      cd backend
                      npm install
                      npm run migrations >> migration-output.txt
                      cat migration-output.txt
            - run:
                  name: Store migration output as a file
                  command: |
                      cd backend
                      if grep -q "has been executed successfully." migration-output.txt
                      then
                          touch ~/project/.circleci/outputs/db-migration-success
                      fi
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/.circleci/outputs/
            - destroy-environment:
                  workflow_id: ${CIRCLE_WORKFLOW_ID}

    deploy-frontend:
        docker:
            - image: python:3.7-alpine
        steps:
            - checkout
            - run:
                  name: Install dependencies
                  command: |
                      apk add --update tar gzip curl nodejs npm zip
                      pip install awscli
            - attach_workspace:
                  at: ~/
            - run:
                  name: Build updated frontend
                  command: |
                      export API_URL=$(curl -H "token: ${MEMSTASH_TOKEN}" --request GET https://api.memstash.io/values/backend-url)
                      echo "API_URL: $API_URL"
                      cd frontend
                      npm install
                      npm run build:prod
            - run:
                  name: Deploy frontend objects to S3 Bucket
                  command: |
                      cd frontend
                      aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID}/ --recursive
            - destroy-environment:
                  workflow_id: "${CIRCLE_WORKFLOW_ID}"
            - revert-migrations

    deploy-backend:
        docker:
            - image: python:3.7-alpine
        environment:
            ANSIBLE_HOST_KEY_CHECKING: "no"
        steps:
            - checkout
            - run:
                  name: Install dependencies
                  command: |
                      apk add --update tar gzip curl nodejs npm ansible zip
                      pip install awscli
            - attach_workspace:
                  at: ~/
            - run:
                  name: Package backend
                  command: |
                      cd backend/dist
                      cp ../package* .
                      zip -rq dist.zip *
                      mkdir -p ~/project/.circleci/ansible/roles/deploy-backend/files
                      mv dist.zip ~/project/.circleci/ansible/roles/deploy-backend/files/
            - add_ssh_keys:
                  fingerprints:
                      ["3d:2b:bf:62:ce:19:0c:d6:9e:67:24:77:b9:f3:69:e0"]
            - run:
                  name: Deploy backend
                  command: |
                      cd .circleci/ansible
                      ansible-playbook -vvvv -i inventory.txt deploy-backend.yml
            - destroy-environment:
                  workflow_id: "${CIRCLE_WORKFLOW_ID}"
            - revert-migrations

    smoke-test:
        docker:
            - image: python:3.7-alpine
        steps:
            - checkout
            - run:
                  name: Install dependencies
                  command: |
                      apk add --update tar gzip curl
                      pip install awscli
            - attach_workspace:
                  at: ~/
            - run:
                  name: Test frontend app
                  command: |
                      if curl -s http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com/ | grep "Welcome"
                      then
                        return 0
                      else
                        return 1
                      fi
            - run:
                  name: Test backend app
                  command: |
                      API_URL=$(curl curl -H "token: ${MEMSTASH_TOKEN}" --request GET https://api.memstash.io/values/backend-url)
                      echo $API_URL
                      curl -s $API_URL/api/status
            - destroy-environment:
                  workflow_id: "${CIRCLE_WORKFLOW_ID}"
            - revert-migrations

    cloudfront-update:
        docker:
            - image: python:3.7-alpine
        steps:
            - checkout
            - run:
                  name: Install dependencies
                  command: |
                      apk add --update curl
                      pip install awscli
            - run:
                  name: Deploy the backend infrastructure using cloudformation
                  command: |
                      OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)

                      echo "OLD_WORKFLOW_ID: $OLD_WORKFLOW_ID."
                      curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" --request PUT --data "$OLD_WORKFLOW_ID" https://api.memstash.io/values/old-workflow-id

                      aws cloudformation deploy \
                      --template-file .circleci/files/cloudfront.yml \
                      --parameter-overrides WorkflowID="prod-${CIRCLE_WORKFLOW_ID}" \
                      --stack-name udapeople-prod-cloudfront
            - destroy-environment:
                  workflow_id: "${CIRCLE_WORKFLOW_ID}"
            - revert-migrations

    cleanup:
        docker:
            - image: python:3.7-alpine
        steps:
            - checkout
            - run:
                name: Install dependencies
                command: |
                    apk add --update curl
                    pip install awscli
            - run:
                name: Get old stack workflow id
                command: |
                    export OLD_WORKFLOW_ID=$(curl -H "token: ${MEMSTASH_TOKEN}" --request GET https://api.memstash.io/values/old-workflow-id)
            - run:
                name: Remove old stacks and files
                command: |                    
                    export RAW_STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                        --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
                    export STACKS=($RAW_STACKS)
                    printf '%s\n' "${STACKS[@]}"

                    if printf '%s\n' "${STACKS[@]}" | grep -q "$OLD_WORKFLOW_ID"; then
                        echo "Removing previous stack"
                        aws s3 rm "s3://udapeople-${OLD_WORKFLOW_ID}" --recursive
                        aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_WORKFLOW_ID}"
                        aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLD_WORKFLOW_ID}"
                    fi
            - destroy-environment:
                workflow_id: ${CIRCLE_WORKFLOW_ID}
            - revert-migrations

workflows:
    default:
        jobs:
            - build-frontend
            - build-backend
            - test-frontend:
                  requires: [build-frontend]
            - test-backend:
                  requires: [build-backend]
            - scan-frontend:
                  requires: [build-frontend]
            - scan-backend:
                  requires: [build-backend]
            - deploy-infrastructure:
                  requires:
                      [test-frontend, test-backend, scan-frontend, scan-backend]
                  filters:
                      branches:
                          only: [master]
            - configure-infrastructure:
                  requires: [deploy-infrastructure]
            - run-migrations:
                  requires: [configure-infrastructure]
            - deploy-frontend:
                  requires: [run-migrations]
            - deploy-backend:
                  requires: [run-migrations]
            - smoke-test:
                  requires: [deploy-backend, deploy-frontend]
            - cloudfront-update:
                  requires: [smoke-test]
            - cleanup:
                  requires: [cloudfront-update]
