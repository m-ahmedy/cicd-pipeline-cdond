version: 2.1

commands:
    destroy-environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
        parameters:
            workflow_id:
                type: string
        steps:
            - run:
                  name: Destroy environments
                  when: on_fail
                  command: |
                      aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
                      aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>

    revert-migrations:
        description: Revert the last migration if successfully run in the current workflow.
        parameters:
            workflow_id:
                type: string
        steps:
            - run:
                  name: Revert migrations
                  # Add when this will run
                  command: |
                      # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
                      SUCCESS = 1
                      if(( $SUCCESS==1 )); 
                      then
                      #  cd ~/project/backend
                      #  npm install
                      #  Add revert code here. You can find this in the Getting Started section.
                        exit 1
                      fi

jobs:
    build-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-build]
            - run:
                  name: Install NPM dependencies
                  command: cd frontend && npm install
            - run:
                  name: Build front-end
                  command: cd frontend && npm run build
            - save_cache:
                  paths: [frontend/node_modules]
                  key: frontend-build
            - persist_to_workspace:
                  root: frontend
                  paths:
                      - dist

    build-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Install NPM dependencies
                  command: cd backend && npm install
            - run:
                  name: Build back-end
                  command: cd backend && npm run build
            - save_cache:
                  paths: [backend/node_modules]
                  key: backend-build
            - persist_to_workspace:
                  root: backend
                  paths:
                      - dist

    test-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-build]
            - run:
                  name: Install NPM dependencies
                  command: cd frontend && npm install
            - run:
                  name: Test front-end
                  command: cd frontend && npm run test

    test-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Install NPM dependencies
                  command: cd backend && npm install
            - run:
                  name: Test back-end
                  command: cd backend && npm run test
                  environment:
                      NODE_OPTIONS: --max_old_space_size=8192

    scan-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-build]
            - run:
                  name: Install NPM dependencies
                  command: cd frontend && npm install
            - run:
                  name: Security audit front-end
                  command: cd frontend && npm audit --audit-level=critical

    scan-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Install NPM dependencies
                  command: cd backend && npm install
            - run:
                  name: Security audit back-end
                  command: cd backend && npm audit --audit-level=critical
    deploy-infrastructure:
        docker:
            - image: amazon/aws-cli:latest
        steps:
            - checkout
            - run:
                  name: Ensure back-end infrastructure exists
                  command: |
                      aws cloudformation deploy \
                      --template-file .circleci/files/backend.yml \
                      --tags project=udapeople-${CIRCLE_WORKFLOW_ID} \
                      --stack-name=udapeople-backend-${CIRCLE_WORKFLOW_ID} \
                      --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
            - run:
                  name: Ensure front-end infrastructure exist
                  command: |
                      aws cloudformation deploy \
                      --template-file .circleci/files/frontend.yml \
                      --tags project=udapeople-${CIRCLE_WORKFLOW_ID} \
                      --stack-name=udapeople-frontend-${CIRCLE_WORKFLOW_ID} \
                      --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
            - run:
                  name: Add back-end ip to ansible inventory
                  command: |
                      echo "[backend]" > .circleci/ansible/inventory.txt
                      aws ec2 describe-instances \
                      --query 'Reservations[*].Instances[*].PublicIpAddress' \
                      --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID} \
                      --output text >> .circleci/ansible/inventory.txt
            - run:
                  name: Install tar dependency
                  command: yum update -y && yum install -y tar gzip
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/.circleci/ansible/inventory.txt
            # Here's where you will add some code to rollback on failure
            - destroy-environment:
                  workflow_id: ${CIRCLE_WORKFLOW_ID}

cleanup:
    docker:
        # Docker image here
    steps:
        # Checkout code from git
        - run:
              name: Get old stack workflow id
              command: |
                  # your code here
                  export OldWorkflowID="the id here"
                  export STACKS=[] #put the list of stacks here
        - run:
              name: Remove old stacks and files
              command: |
                  if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
                  then
                    # your code here
                  fi

workflows:
    default:
        jobs:
            - build-frontend
            - build-backend
            - test-frontend:
                  requires: [build-frontend]
            - test-backend:
                  requires: [build-backend]
            - scan-frontend:
                  requires: [build-frontend]
            - scan-backend:
                  requires: [build-backend]
            - deploy-infrastructure:
                  requires:
                      [test-frontend, test-backend, scan-frontend, scan-backend]
                  filters:
                      branches:
                        only: [master]
